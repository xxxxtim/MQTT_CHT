{"version":3,"sources":["components/Hook/Connection.js","components/Hook/Publisher.js","components/Hook/Subscriber.js","components/Hook/Receiver.js","components/Hook/index.js","App.js","serviceWorker.js","index.js"],"names":["Connection","connect","disconnect","connectBtn","Form","useForm","form","initialConnectionOptions","protocol","host","clientId","Math","random","toString","substring","port","username","password","ConnectionForm","layout","name","initialValues","onFinish","values","url","clean","reconnectPeriod","connectTimeout","gutter","span","Item","label","onChange","value","setFieldsValue","Option","title","actions","type","onClick","submit","danger","Publisher","publish","qosOptions","useContext","QosOption","PublishForm","topic","qos","options","TextArea","offset","style","textAlign","htmlType","Subscriber","sub","unSub","showUnsub","SubForm","marginLeft","getFieldsValue","Receiver","payload","useState","messages","setMessages","useEffect","size","bordered","dataSource","renderItem","item","Meta","description","message","createContext","qosOption","HookMqtt","client","setClient","isSubed","setIsSub","setPayload","connectStatus","setConnectStatus","on","console","log","err","error","end","mqttOption","mqtt","Provider","subscription","subscribe","unsubscribe","context","App","className","Hook","Boolean","window","location","hostname","match","ReactDOM","createRoot","document","getElementById","render","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.5744b71d.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, Button, Form, Input, Row, Col, Select } from \"antd\";\n\n/**\n * this demo uses EMQX Public MQTT Broker (https://www.emqx.com/en/mqtt/public-mqtt5-broker), here are the details:\n *\n * Broker host: broker.emqx.io\n * WebSocket port: 8083\n * WebSocket over TLS/SSL port: 8084\n */\n\nconst Connection = ({ connect, disconnect, connectBtn }) => {\n  const [form] = Form.useForm();\n  const initialConnectionOptions = {\n    // ws or wss\n    protocol: \"ws\",\n    host: \"broker.emqx.io\",\n    clientId: \"emqx_react_\" + Math.random().toString(16).substring(2, 8),\n    // ws -> 8083; wss -> 8084\n    port: 8083,\n    // port: 1883,\n    /**\n     * By default, EMQX allows clients to connect without authentication.\n     * https://docs.emqx.com/en/enterprise/v4.4/advanced/auth.html#anonymous-login\n     */\n    username: \"emqx_test\",\n    password: \"emqx_test\",\n  };\n\n  const handleProtocolChange = (value) => {\n    form.setFieldsValue({\n      port: value === \"wss\" ? 8084 : 8083,\n      // port: value === \"wss\" ? 8084 : 1883,\n    });\n  };\n\n  const onFinish = (values) => {\n    const { protocol, host, clientId, port, username, password } = values;\n    const url = `${protocol}://${host}:${port}/mqtt`;\n    const options = {\n      clientId,\n      username,\n      password,\n      clean: true,\n      reconnectPeriod: 1000, // ms\n      connectTimeout: 30 * 1000, // ms\n    };\n    connect(url, options);\n  };\n\n  const handleConnect = () => {\n    form.submit();\n  };\n\n  const handleDisconnect = () => {\n    disconnect();\n  };\n\n  const ConnectionForm = (\n    <Form\n      layout=\"vertical\"\n      name=\"basic\"\n      form={form}\n      initialValues={initialConnectionOptions}\n      onFinish={onFinish}\n    >\n      <Row gutter={20}>\n        <Col span={8}>\n          <Form.Item label=\"Protocol\" name=\"protocol\">\n            <Select onChange={handleProtocolChange}>\n              <Select.Option value=\"ws\">ws</Select.Option>\n              <Select.Option value=\"wss\">wss</Select.Option>\n            </Select>\n          </Form.Item>\n        </Col>\n        <Col span={8}>\n          <Form.Item label=\"Host\" name=\"host\">\n            <Input />\n          </Form.Item>\n        </Col>\n        <Col span={8}>\n          <Form.Item label=\"Port\" name=\"port\">\n            <Input />\n          </Form.Item>\n        </Col>\n        <Col span={8}>\n          <Form.Item label=\"Client ID\" name=\"clientId\">\n            <Input />\n          </Form.Item>\n        </Col>\n        <Col span={8}>\n          <Form.Item label=\"Username\" name=\"username\">\n            <Input />\n          </Form.Item>\n        </Col>\n        <Col span={8}>\n          <Form.Item label=\"Password\" name=\"password\">\n            <Input />\n          </Form.Item>\n        </Col>\n      </Row>\n    </Form>\n  );\n\n  return (\n    <Card\n      title=\"Connection\"\n      actions={[\n        <Button type=\"primary\" onClick={handleConnect}>\n          {connectBtn}\n        </Button>,\n        <Button danger onClick={handleDisconnect}>\n          Disconnect\n        </Button>,\n      ]}\n    >\n      {ConnectionForm}\n    </Card>\n  );\n};\n\nexport default Connection;\n","import React, { useContext } from 'react';\nimport { Card, Form, Input, Row, Col, Button, Select } from 'antd';\nimport { QosOption } from './index'\n\nconst Publisher = ({ publish }) => {\n  const [form] = Form.useForm();\n  const qosOptions = useContext(QosOption);\n\n  // topic, QoS for publishing message\n  const record = {\n    topic: 'testtopic/react',\n    qos: 0,\n  };\n\n  const onFinish = (values) => {\n    publish(values)\n  };\n\n  const PublishForm = (\n    <Form\n      layout=\"vertical\"\n      name=\"basic\"\n      form={form}\n      initialValues={record}\n      onFinish={onFinish}\n    >\n      <Row gutter={20}>\n        <Col span={12}>\n          <Form.Item\n            label=\"Topic\"\n            name=\"topic\"\n          >\n            <Input />\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item\n            label=\"QoS\"\n            name=\"qos\"\n          >\n            <Select options={qosOptions} />\n          </Form.Item>\n        </Col>\n        <Col span={24}>\n          <Form.Item\n            label=\"Payload\"\n            name=\"payload\"\n          >\n            <Input.TextArea />\n          </Form.Item>\n        </Col>\n        <Col span={8} offset={16} style={{ textAlign: 'right' }}>\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Publish\n            </Button>\n          </Form.Item>\n        </Col>\n      </Row>\n    </Form>\n  )\n\n  return (\n    <Card\n      title=\"Publisher\"\n    >\n      {PublishForm}\n    </Card>\n  );\n}\n\nexport default Publisher;\n","import React, { useContext } from 'react'\nimport { Card, Form, Input, Row, Col, Button, Select } from 'antd'\nimport { QosOption } from './index'\n\nconst Subscriber = ({ sub, unSub, showUnsub }) => {\n  const [form] = Form.useForm()\n  const qosOptions = useContext(QosOption)\n\n  // topic & QoS for MQTT subscribing\n  const record = {\n    topic: 'testtopic/react',\n    qos: 0,\n  }\n\n  const onFinish = (values) => {\n    sub(values)\n  }\n\n  const handleUnsub = () => {\n    const values = form.getFieldsValue()\n    unSub(values)\n  }\n\n  const SubForm = (\n    <Form\n      layout=\"vertical\"\n      name=\"basic\"\n      form={form}\n      initialValues={record}\n      onFinish={onFinish}\n    >\n      <Row gutter={20}>\n        <Col span={12}>\n          <Form.Item label=\"Topic\" name=\"topic\">\n            <Input />\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item label=\"QoS\" name=\"qos\">\n            <Select options={qosOptions} />\n          </Form.Item>\n        </Col>\n        <Col span={8} offset={16} style={{ textAlign: 'right' }}>\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Subscribe\n            </Button>\n            {showUnsub ? (\n              <Button\n                type=\"danger\"\n                style={{ marginLeft: '10px' }}\n                onClick={handleUnsub}\n              >\n                Unsubscribe\n              </Button>\n            ) : null}\n          </Form.Item>\n        </Col>\n      </Row>\n    </Form>\n  )\n\n  return <Card title=\"Subscriber\">{SubForm}</Card>\n}\n\nexport default Subscriber\n","import React, { useEffect, useState } from 'react';\nimport { Card, List } from 'antd';\n\nconst Receiver = ({ payload }) => {\n  const [messages, setMessages] = useState([])\n\n  useEffect(() => {\n    if (payload.topic) {\n      setMessages(messages => [...messages, payload])\n    }\n  }, [payload])\n\n  const renderListItem = (item) => (\n    <List.Item>\n      <List.Item.Meta\n        title={item.topic}\n        description={item.message}\n      />\n    </List.Item>\n  )\n\n  return (\n    <Card\n      title=\"Receiver\"\n    >\n      <List\n        size=\"small\"\n        bordered\n        dataSource={messages}\n        renderItem={renderListItem}\n      />\n    </Card>\n  );\n}\n\nexport default Receiver;\n","import React, { createContext, useEffect, useState } from \"react\";\nimport Connection from \"./Connection\";\nimport Publisher from \"./Publisher\";\nimport Subscriber from \"./Subscriber\";\nimport Receiver from \"./Receiver\";\nimport mqtt from \"mqtt\";\n\nexport const QosOption = createContext([]);\n// https://github.com/mqttjs/MQTT.js#qos\nconst qosOption = [\n  {\n    label: \"0\",\n    value: 0,\n  },\n  {\n    label: \"1\",\n    value: 1,\n  },\n  {\n    label: \"2\",\n    value: 2,\n  },\n];\n\nconst HookMqtt = () => {\n  const [client, setClient] = useState(null);\n  const [isSubed, setIsSub] = useState(false);\n  const [payload, setPayload] = useState({});\n  const [connectStatus, setConnectStatus] = useState(\"Connect\");\n\n  const mqttConnect = (host, mqttOption) => {\n    setConnectStatus(\"Connecting\");\n    /**\n     * if protocol is \"ws\", connectUrl = \"ws://broker.emqx.io:8083/mqtt\"\n     * if protocol is \"wss\", connectUrl = \"wss://broker.emqx.io:8084/mqtt\"\n     *\n     * /mqtt: MQTT-WebSocket uniformly uses /path as the connection path,\n     * which should be specified when connecting, and the path used on EMQX is /mqtt.\n     *\n     * for more details about \"mqtt.connect\" method & options,\n     * please refer to https://github.com/mqttjs/MQTT.js#mqttconnecturl-options\n     */\n    setClient(mqtt.connect(host, mqttOption));\n  };\n\n  useEffect(() => {\n    if (client) {\n      // https://github.com/mqttjs/MQTT.js#event-connect\n      client.on(\"connect\", () => {\n        setConnectStatus(\"Connected\");\n        console.log(\"connection successful\");\n      });\n\n      // https://github.com/mqttjs/MQTT.js#event-error\n      client.on(\"error\", (err) => {\n        console.error(\"Connection error: \", err);\n        client.end();\n      });\n\n      // https://github.com/mqttjs/MQTT.js#event-reconnect\n      client.on(\"reconnect\", () => {\n        setConnectStatus(\"Reconnecting\");\n      });\n\n      // https://github.com/mqttjs/MQTT.js#event-message\n      client.on(\"message\", (topic, message) => {\n        const payload = { topic, message: message.toString() };\n        setPayload(payload);\n        console.log(`received message: ${message} from topic: ${topic}`);\n      });\n    }\n  }, [client]);\n\n  // disconnect\n  // https://github.com/mqttjs/MQTT.js#mqttclientendforce-options-callback\n  const mqttDisconnect = () => {\n    if (client) {\n      try {\n        client.end(false, () => {\n          setConnectStatus(\"Connect\");\n          console.log(\"disconnected successfully\");\n        });\n      } catch (error) {\n        console.log(\"disconnect error:\", error);\n      }\n    }\n  };\n\n  // publish message\n  // https://github.com/mqttjs/MQTT.js#mqttclientpublishtopic-message-options-callback\n  const mqttPublish = (context) => {\n    if (client) {\n      // topic, QoS & payload for publishing message\n      const { topic, qos, payload } = context;\n      client.publish(topic, payload, { qos }, (error) => {\n        if (error) {\n          console.log(\"Publish error: \", error);\n        }\n      });\n    }\n  };\n\n  const mqttSub = (subscription) => {\n    if (client) {\n      // topic & QoS for MQTT subscribing\n      const { topic, qos } = subscription;\n      // subscribe topic\n      // https://github.com/mqttjs/MQTT.js#mqttclientsubscribetopictopic-arraytopic-object-options-callback\n      client.subscribe(topic, { qos }, (error) => {\n        if (error) {\n          console.log(\"Subscribe to topics error\", error);\n          return;\n        }\n        console.log(`Subscribe to topics: ${topic}`);\n        setIsSub(true);\n      });\n    }\n  };\n\n  // unsubscribe topic\n  // https://github.com/mqttjs/MQTT.js#mqttclientunsubscribetopictopic-array-options-callback\n  const mqttUnSub = (subscription) => {\n    if (client) {\n      const { topic, qos } = subscription;\n      client.unsubscribe(topic, { qos }, (error) => {\n        if (error) {\n          console.log(\"Unsubscribe error\", error);\n          return;\n        }\n        console.log(`unsubscribed topic: ${topic}`);\n        setIsSub(false);\n      });\n    }\n  };\n\n  return (\n    <>\n      <Connection\n        connect={mqttConnect}\n        disconnect={mqttDisconnect}\n        connectBtn={connectStatus}\n      />\n      <QosOption.Provider value={qosOption}>\n        <Subscriber sub={mqttSub} unSub={mqttUnSub} showUnsub={isSubed} />\n        <Publisher publish={mqttPublish} />\n      </QosOption.Provider>\n      <Receiver payload={payload} />\n    </>\n  );\n};\n\nexport default HookMqtt;\n","import React from 'react'\nimport HookMqtt from './components/Hook/'\n// Hook or Class\n// import ClassMqtt from './components/Class/'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HookMqtt />\n      {/* Hook or Class */}\n      {/* <ClassMqtt /> */}\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nconst root = ReactDOM.createRoot(document.getElementById('root'))\nroot.render(<App />)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}